<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="614" onload="init(evt)" viewBox="0 0 1200 614" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="614" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="597.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="597.00"> </text><svg id="frames" x="10" width="1180"><g><title>libsystem_pthread.dylib`pthread_mutex_lock (17 samples, 0.14%)</title><rect x="0.0000%" y="293" width="0.1378%" height="15" fill="rgb(227,0,7)"/><text x="0.2500%" y="303.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (14 samples, 0.11%)</title><rect x="0.1378%" y="293" width="0.1135%" height="15" fill="rgb(217,0,24)"/><text x="0.3878%" y="303.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (14 samples, 0.11%)</title><rect x="1.3615%" y="277" width="0.1135%" height="15" fill="rgb(221,193,54)"/><text x="1.6115%" y="287.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (22 samples, 0.18%)</title><rect x="1.5479%" y="277" width="0.1783%" height="15" fill="rgb(248,212,6)"/><text x="1.7979%" y="287.50"></text></g><g><title>simple-torrent`tokio::runtime::queue::Steal&lt;T&gt;::steal_into (13 samples, 0.11%)</title><rect x="2.1233%" y="277" width="0.1054%" height="15" fill="rgb(208,68,35)"/><text x="2.3733%" y="287.50"></text></g><g><title>simple-torrent`tokio::runtime::thread_pool::idle::Idle::is_parked (29 samples, 0.24%)</title><rect x="2.2287%" y="277" width="0.2350%" height="15" fill="rgb(232,128,0)"/><text x="2.4787%" y="287.50"></text></g><g><title>simple-torrent`tokio::runtime::thread_pool::idle::Idle::transition_worker_to_parked (35 samples, 0.28%)</title><rect x="2.4637%" y="277" width="0.2837%" height="15" fill="rgb(207,160,47)"/><text x="2.7137%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (30 samples, 0.24%)</title><rect x="4.7168%" y="261" width="0.2431%" height="15" fill="rgb(228,23,34)"/><text x="4.9668%" y="271.50"></text></g><g><title>libsystem_pthread.dylib`pthread_cond_wait (16 samples, 0.13%)</title><rect x="4.9680%" y="261" width="0.1297%" height="15" fill="rgb(218,30,26)"/><text x="5.2180%" y="271.50"></text></g><g><title>libsystem_pthread.dylib`sched_yield (22 samples, 0.18%)</title><rect x="5.2597%" y="261" width="0.1783%" height="15" fill="rgb(220,122,19)"/><text x="5.5097%" y="271.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (18 samples, 0.15%)</title><rect x="6.2323%" y="245" width="0.1459%" height="15" fill="rgb(250,228,42)"/><text x="6.4823%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (983 samples, 7.97%)</title><rect x="6.3782%" y="245" width="7.9666%" height="15" fill="rgb(240,193,28)"/><text x="6.6282%" y="255.50">libsystem_k..</text></g><g><title>libsystem_kernel.dylib`swtch_pri (861 samples, 6.98%)</title><rect x="14.4177%" y="245" width="6.9779%" height="15" fill="rgb(216,20,37)"/><text x="14.6677%" y="255.50">libsystem..</text></g><g><title>libsystem_pthread.dylib`_pthread_cond_wait (59 samples, 0.48%)</title><rect x="21.4766%" y="245" width="0.4782%" height="15" fill="rgb(206,188,39)"/><text x="21.7266%" y="255.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (13 samples, 0.11%)</title><rect x="22.0358%" y="245" width="0.1054%" height="15" fill="rgb(217,207,13)"/><text x="22.2858%" y="255.50"></text></g><g><title>libsystem_pthread.dylib`sched_yield (27 samples, 0.22%)</title><rect x="22.1412%" y="245" width="0.2188%" height="15" fill="rgb(231,73,38)"/><text x="22.3912%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (27 samples, 0.22%)</title><rect x="22.5626%" y="229" width="0.2188%" height="15" fill="rgb(225,20,46)"/><text x="22.8126%" y="239.50"></text></g><g><title>simple-torrent`&lt;std::time::Instant as core::ops::arith::Add&lt;core::time::Duration&gt;&gt;::add (13 samples, 0.11%)</title><rect x="22.8463%" y="229" width="0.1054%" height="15" fill="rgb(210,31,41)"/><text x="23.0963%" y="239.50"></text></g><g><title>simple-torrent`std::sys::unix::time::inner::checked_dur2intervals (13 samples, 0.11%)</title><rect x="22.8463%" y="213" width="0.1054%" height="15" fill="rgb(221,200,47)"/><text x="23.0963%" y="223.50"></text></g><g><title>simple-torrent`&lt;mio::poll::Iter as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 0.12%)</title><rect x="23.9079%" y="213" width="0.1216%" height="15" fill="rgb(226,26,5)"/><text x="24.1579%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`kevent (1,279 samples, 10.37%)</title><rect x="24.5644%" y="181" width="10.3655%" height="15" fill="rgb(249,33,26)"/><text x="24.8144%" y="191.50">libsystem_kerne..</text></g><g><title>libsystem_platform.dylib`_platform_memset$VARIANT$Haswell (38 samples, 0.31%)</title><rect x="35.0353%" y="181" width="0.3080%" height="15" fill="rgb(235,183,28)"/><text x="35.2853%" y="191.50"></text></g><g><title>simple-torrent`mio::poll::ReadinessQueueInner::dequeue_node (15 samples, 0.12%)</title><rect x="35.4972%" y="181" width="0.1216%" height="15" fill="rgb(221,5,38)"/><text x="35.7472%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`read (78 samples, 0.63%)</title><rect x="35.6512%" y="165" width="0.6321%" height="15" fill="rgb(247,18,42)"/><text x="35.9012%" y="175.50"></text></g><g><title>simple-torrent`mio::sys::unix::awakener::pipe::Awakener::cleanup (91 samples, 0.74%)</title><rect x="35.6188%" y="181" width="0.7375%" height="15" fill="rgb(241,131,45)"/><text x="35.8688%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (40 samples, 0.32%)</title><rect x="37.2802%" y="165" width="0.3242%" height="15" fill="rgb(249,31,29)"/><text x="37.5302%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset$VARIANT$Haswell (284 samples, 2.30%)</title><rect x="37.6043%" y="165" width="2.3016%" height="15" fill="rgb(225,111,53)"/><text x="37.8543%" y="175.50">l..</text></g><g><title>simple-torrent`mio::poll::Poll::poll1 (1,981 samples, 16.05%)</title><rect x="24.1024%" y="197" width="16.0548%" height="15" fill="rgb(238,160,17)"/><text x="24.3524%" y="207.50">simple-torrent`mio::poll:..</text></g><g><title>simple-torrent`mio::sys::unix::kqueue::Selector::select (469 samples, 3.80%)</title><rect x="36.3563%" y="181" width="3.8010%" height="15" fill="rgb(214,148,48)"/><text x="36.6063%" y="191.50">simp..</text></g><g><title>simple-torrent`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S&gt;&gt;::rustc_entry (30 samples, 0.24%)</title><rect x="39.9141%" y="165" width="0.2431%" height="15" fill="rgb(232,36,49)"/><text x="40.1641%" y="175.50"></text></g><g><title>simple-torrent`mio::poll::Poll::poll (1,995 samples, 16.17%)</title><rect x="24.0538%" y="213" width="16.1682%" height="15" fill="rgb(209,103,24)"/><text x="24.3038%" y="223.50">simple-torrent`mio::poll:..</text></g><g><title>simple-torrent`tokio::runtime::task::state::State::transition_to_notified (18 samples, 0.15%)</title><rect x="40.4328%" y="197" width="0.1459%" height="15" fill="rgb(229,88,8)"/><text x="40.6828%" y="207.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (27 samples, 0.22%)</title><rect x="40.7651%" y="165" width="0.2188%" height="15" fill="rgb(213,181,19)"/><text x="41.0151%" y="175.50"></text></g><g><title>simple-torrent`tokio::runtime::thread_pool::worker::CURRENT::FOO::__getit (14 samples, 0.11%)</title><rect x="40.9839%" y="165" width="0.1135%" height="15" fill="rgb(254,191,54)"/><text x="41.2339%" y="175.50"></text></g><g><title>simple-torrent`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (65 samples, 0.53%)</title><rect x="40.6192%" y="181" width="0.5268%" height="15" fill="rgb(241,83,37)"/><text x="40.8692%" y="191.50"></text></g><g><title>simple-torrent`tokio::runtime::task::waker::wake_by_val (100 samples, 0.81%)</title><rect x="40.3923%" y="213" width="0.8104%" height="15" fill="rgb(233,36,39)"/><text x="40.6423%" y="223.50"></text></g><g><title>simple-torrent`tokio::runtime::thread_pool::worker::_&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;::schedule (77 samples, 0.62%)</title><rect x="40.5787%" y="197" width="0.6240%" height="15" fill="rgb(226,3,54)"/><text x="40.8287%" y="207.50"></text></g><g><title>simple-torrent`tokio::io::driver::Driver::turn (2,216 samples, 17.96%)</title><rect x="23.3163%" y="229" width="17.9593%" height="15" fill="rgb(245,192,40)"/><text x="23.5663%" y="239.50">simple-torrent`tokio::io::dr..</text></g><g><title>simple-torrent`tokio::runtime::task::waker::wake_by_val (23 samples, 0.19%)</title><rect x="41.2756%" y="229" width="0.1864%" height="15" fill="rgb(238,167,29)"/><text x="41.5256%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (23 samples, 0.19%)</title><rect x="41.6971%" y="213" width="0.1864%" height="15" fill="rgb(232,182,51)"/><text x="41.9471%" y="223.50"></text></g><g><title>simple-torrent`tokio::time::wheel::Wheel&lt;T&gt;::poll (34 samples, 0.28%)</title><rect x="41.9645%" y="213" width="0.2755%" height="15" fill="rgb(231,60,39)"/><text x="42.2145%" y="223.50"></text></g><g><title>simple-torrent`tokio::time::wheel::level::Level&lt;T&gt;::next_expiration (17 samples, 0.14%)</title><rect x="42.1023%" y="197" width="0.1378%" height="15" fill="rgb(208,69,12)"/><text x="42.3523%" y="207.50"></text></g><g><title>simple-torrent`tokio::time::driver::Driver&lt;T&gt;::process (100 samples, 0.81%)</title><rect x="41.4701%" y="229" width="0.8104%" height="15" fill="rgb(235,93,37)"/><text x="41.7201%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (13 samples, 0.11%)</title><rect x="42.4994%" y="213" width="0.1054%" height="15" fill="rgb(213,116,39)"/><text x="42.7494%" y="223.50"></text></g><g><title>simple-torrent`tokio::time::driver::Driver&lt;T&gt;::process_queue (54 samples, 0.44%)</title><rect x="42.2806%" y="229" width="0.4376%" height="15" fill="rgb(222,207,29)"/><text x="42.5306%" y="239.50"></text></g><g><title>simple-torrent`tokio::time::wheel::Wheel&lt;T&gt;::poll_at (28 samples, 0.23%)</title><rect x="42.7668%" y="229" width="0.2269%" height="15" fill="rgb(206,96,30)"/><text x="43.0168%" y="239.50"></text></g><g><title>simple-torrent`tokio::time::wheel::level::Level&lt;T&gt;::next_expiration (22 samples, 0.18%)</title><rect x="42.8155%" y="213" width="0.1783%" height="15" fill="rgb(218,138,4)"/><text x="43.0655%" y="223.50"></text></g><g><title>simple-torrent`&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park (2,551 samples, 20.67%)</title><rect x="22.3600%" y="245" width="20.6743%" height="15" fill="rgb(250,191,14)"/><text x="22.6100%" y="255.50">simple-torrent`&lt;tokio::park::eith..</text></g><g><title>simple-torrent`std::panicking::panicking (15 samples, 0.12%)</title><rect x="43.0424%" y="245" width="0.1216%" height="15" fill="rgb(239,60,40)"/><text x="43.2924%" y="255.50"></text></g><g><title>simple-torrent`&lt;tokio::runtime::park::Parker as tokio::park::Park&gt;::park (4,689 samples, 38.00%)</title><rect x="5.4705%" y="261" width="38.0015%" height="15" fill="rgb(206,27,48)"/><text x="5.7205%" y="271.50">simple-torrent`&lt;tokio::runtime::park::Parker as tokio::park::P..</text></g><g><title>libsystem_kernel.dylib`kevent (31 samples, 0.25%)</title><rect x="43.5205%" y="181" width="0.2512%" height="15" fill="rgb(225,35,8)"/><text x="43.7705%" y="191.50"></text></g><g><title>simple-torrent`tokio::io::driver::Driver::turn (46 samples, 0.37%)</title><rect x="43.4962%" y="229" width="0.3728%" height="15" fill="rgb(250,213,24)"/><text x="43.7462%" y="239.50"></text></g><g><title>simple-torrent`mio::poll::Poll::poll (45 samples, 0.36%)</title><rect x="43.5043%" y="213" width="0.3647%" height="15" fill="rgb(247,123,22)"/><text x="43.7543%" y="223.50"></text></g><g><title>simple-torrent`mio::poll::Poll::poll1 (45 samples, 0.36%)</title><rect x="43.5043%" y="197" width="0.3647%" height="15" fill="rgb(231,138,38)"/><text x="43.7543%" y="207.50"></text></g><g><title>simple-torrent`&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park_timeout (52 samples, 0.42%)</title><rect x="43.4800%" y="245" width="0.4214%" height="15" fill="rgb(231,145,46)"/><text x="43.7300%" y="255.50"></text></g><g><title>simple-torrent`&lt;tokio::runtime::park::Parker as tokio::park::Park&gt;::park_timeout (55 samples, 0.45%)</title><rect x="43.4719%" y="261" width="0.4457%" height="15" fill="rgb(251,118,11)"/><text x="43.7219%" y="271.50"></text></g><g><title>simple-torrent`tokio::runtime::thread_pool::worker::Context::park_timeout (5,097 samples, 41.31%)</title><rect x="2.8284%" y="277" width="41.3080%" height="15" fill="rgb(217,147,25)"/><text x="3.0784%" y="287.50">simple-torrent`tokio::runtime::thread_pool::worker::Context::park_ti..</text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (546 samples, 4.42%)</title><rect x="44.2661%" y="261" width="4.4250%" height="15" fill="rgb(247,81,37)"/><text x="44.5161%" y="271.50">libsy..</text></g><g><title>libsystem_pthread.dylib`pthread_cond_signal (13 samples, 0.11%)</title><rect x="48.7641%" y="261" width="0.1054%" height="15" fill="rgb(209,12,38)"/><text x="49.0141%" y="271.50"></text></g><g><title>simple-torrent`&lt;tokio::runtime::park::Unparker as tokio::park::Unpark&gt;::unpark (17 samples, 0.14%)</title><rect x="49.0396%" y="261" width="0.1378%" height="15" fill="rgb(227,1,9)"/><text x="49.2896%" y="271.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (13 samples, 0.11%)</title><rect x="49.2260%" y="245" width="0.1054%" height="15" fill="rgb(248,47,43)"/><text x="49.4760%" y="255.50"></text></g><g><title>simple-torrent`tokio::runtime::task::raw::poll (18 samples, 0.15%)</title><rect x="49.4854%" y="245" width="0.1459%" height="15" fill="rgb(221,10,30)"/><text x="49.7354%" y="255.50"></text></g><g><title>simple-torrent`&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (17 samples, 0.14%)</title><rect x="50.2553%" y="197" width="0.1378%" height="15" fill="rgb(210,229,1)"/><text x="50.5053%" y="207.50"></text></g><g><title>simple-torrent`std::future::TLS_CX::__getit (13 samples, 0.11%)</title><rect x="51.0090%" y="149" width="0.1054%" height="15" fill="rgb(222,148,37)"/><text x="51.2590%" y="159.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (52 samples, 0.42%)</title><rect x="51.8113%" y="133" width="0.4214%" height="15" fill="rgb(234,67,33)"/><text x="52.0613%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`__recvfrom (66 samples, 0.53%)</title><rect x="52.5083%" y="69" width="0.5349%" height="15" fill="rgb(247,98,35)"/><text x="52.7583%" y="79.50"></text></g><g><title>simple-torrent`&lt;&amp;mio::net::tcp::TcpStream as std::io::Read&gt;::read (72 samples, 0.58%)</title><rect x="52.4921%" y="85" width="0.5835%" height="15" fill="rgb(247,138,52)"/><text x="52.7421%" y="95.50"></text></g><g><title>simple-torrent`&lt;tokio::io::util::read_exact::ReadExact&lt;A&gt; as core::future::future::Future&gt;::poll (90 samples, 0.73%)</title><rect x="52.4273%" y="133" width="0.7294%" height="15" fill="rgb(213,79,30)"/><text x="52.6773%" y="143.50"></text></g><g><title>simple-torrent`&lt;tokio::net::tcp::split_owned::OwnedReadHalf as tokio::io::async_read::AsyncRead&gt;::poll_read (88 samples, 0.71%)</title><rect x="52.4435%" y="117" width="0.7132%" height="15" fill="rgb(246,177,23)"/><text x="52.6935%" y="127.50"></text></g><g><title>simple-torrent`tokio::net::tcp::stream::TcpStream::poll_read_priv (85 samples, 0.69%)</title><rect x="52.4678%" y="101" width="0.6889%" height="15" fill="rgb(230,62,27)"/><text x="52.7178%" y="111.50"></text></g><g><title>simple-torrent`&lt;tokio::io::util::read_to_end::Guard as core::ops::drop::Drop&gt;::drop (13 samples, 0.11%)</title><rect x="53.1567%" y="133" width="0.1054%" height="15" fill="rgb(216,154,8)"/><text x="53.4067%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (18 samples, 0.15%)</title><rect x="53.6834%" y="69" width="0.1459%" height="15" fill="rgb(244,35,45)"/><text x="53.9334%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`large_malloc (18 samples, 0.15%)</title><rect x="53.6834%" y="53" width="0.1459%" height="15" fill="rgb(251,115,12)"/><text x="53.9334%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (67 samples, 0.54%)</title><rect x="53.6105%" y="85" width="0.5430%" height="15" fill="rgb(240,54,50)"/><text x="53.8605%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (40 samples, 0.32%)</title><rect x="53.8293%" y="69" width="0.3242%" height="15" fill="rgb(233,84,52)"/><text x="54.0793%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (76 samples, 0.62%)</title><rect x="53.5943%" y="101" width="0.6159%" height="15" fill="rgb(207,117,47)"/><text x="53.8443%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_size (14 samples, 0.11%)</title><rect x="54.2102%" y="101" width="0.1135%" height="15" fill="rgb(249,43,39)"/><text x="54.4602%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`realloc (105 samples, 0.85%)</title><rect x="53.5051%" y="117" width="0.8510%" height="15" fill="rgb(209,38,44)"/><text x="53.7551%" y="127.50"></text></g><g><title>simple-torrent`std::io::error::Error::kind (15 samples, 0.12%)</title><rect x="54.4939%" y="101" width="0.1216%" height="15" fill="rgb(236,212,23)"/><text x="54.7439%" y="111.50"></text></g><g><title>simple-torrent`tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read_ready (14 samples, 0.11%)</title><rect x="54.7289%" y="101" width="0.1135%" height="15" fill="rgb(242,79,21)"/><text x="54.9789%" y="111.50"></text></g><g><title>libsystem_c.dylib`recv (15 samples, 0.12%)</title><rect x="55.2233%" y="69" width="0.1216%" height="15" fill="rgb(211,96,35)"/><text x="55.4733%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`__recvfrom (1,934 samples, 15.67%)</title><rect x="55.4016%" y="69" width="15.6739%" height="15" fill="rgb(253,215,40)"/><text x="55.6516%" y="79.50">libsystem_kernel.dylib`_..</text></g><g><title>simple-torrent`&lt;&amp;std::net::tcp::TcpStream as std::io::Read&gt;::read (58 samples, 0.47%)</title><rect x="71.0998%" y="69" width="0.4701%" height="15" fill="rgb(211,81,21)"/><text x="71.3498%" y="79.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_exit_if_canceled (28 samples, 0.23%)</title><rect x="71.3429%" y="53" width="0.2269%" height="15" fill="rgb(208,190,38)"/><text x="71.5929%" y="63.50"></text></g><g><title>simple-torrent`&lt;&amp;mio::net::tcp::TcpStream as std::io::Read&gt;::read (2,035 samples, 16.49%)</title><rect x="55.1017%" y="85" width="16.4924%" height="15" fill="rgb(235,213,38)"/><text x="55.3517%" y="95.50">simple-torrent`&lt;&amp;mio::net..</text></g><g><title>simple-torrent`tokio::io::registration::Registration::poll_ready (48 samples, 0.39%)</title><rect x="72.0075%" y="53" width="0.3890%" height="15" fill="rgb(237,122,38)"/><text x="72.2575%" y="63.50"></text></g><g><title>simple-torrent`tokio::sync::task::atomic_waker::AtomicWaker::register_by_ref (13 samples, 0.11%)</title><rect x="72.2911%" y="37" width="0.1054%" height="15" fill="rgb(244,218,35)"/><text x="72.5411%" y="47.50"></text></g><g><title>simple-torrent`tokio::io::poll_evented::PollEvented&lt;E&gt;::clear_read_ready (86 samples, 0.70%)</title><rect x="71.7319%" y="85" width="0.6970%" height="15" fill="rgb(240,68,47)"/><text x="71.9819%" y="95.50"></text></g><g><title>simple-torrent`tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read_ready (75 samples, 0.61%)</title><rect x="71.8211%" y="69" width="0.6078%" height="15" fill="rgb(210,16,53)"/><text x="72.0711%" y="79.50"></text></g><g><title>simple-torrent`tokio::io::registration::Registration::poll_ready (69 samples, 0.56%)</title><rect x="72.7693%" y="69" width="0.5592%" height="15" fill="rgb(235,124,12)"/><text x="73.0193%" y="79.50"></text></g><g><title>simple-torrent`tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read_ready (118 samples, 0.96%)</title><rect x="72.4289%" y="85" width="0.9563%" height="15" fill="rgb(224,169,11)"/><text x="72.6789%" y="95.50"></text></g><g><title>simple-torrent`&lt;tokio::net::tcp::split_owned::OwnedReadHalf as tokio::io::async_read::AsyncRead&gt;::poll_read (2,352 samples, 19.06%)</title><rect x="54.3885%" y="117" width="19.0615%" height="15" fill="rgb(250,166,2)"/><text x="54.6385%" y="127.50">simple-torrent`&lt;tokio::net::tc..</text></g><g><title>simple-torrent`tokio::net::tcp::stream::TcpStream::poll_read_priv (2,296 samples, 18.61%)</title><rect x="54.8424%" y="101" width="18.6077%" height="15" fill="rgb(242,216,29)"/><text x="55.0924%" y="111.50">simple-torrent`tokio::net::tc..</text></g><g><title>simple-torrent`&lt;tokio::io::util::read_to_end::ReadToEnd&lt;A&gt; as core::future::future::Future&gt;::poll (2,499 samples, 20.25%)</title><rect x="53.2620%" y="133" width="20.2529%" height="15" fill="rgb(230,116,27)"/><text x="53.5120%" y="143.50">simple-torrent`&lt;tokio::io::util:..</text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (55 samples, 0.45%)</title><rect x="73.8147%" y="85" width="0.4457%" height="15" fill="rgb(228,99,48)"/><text x="74.0647%" y="95.50"></text></g><g><title>simple-torrent`tokio::park::thread::wake (65 samples, 0.53%)</title><rect x="73.8147%" y="101" width="0.5268%" height="15" fill="rgb(253,11,6)"/><text x="74.0647%" y="111.50"></text></g><g><title>simple-torrent`tokio::sync::mpsc::chan::Tx&lt;T,tokio::loom::std::atomic_usize::AtomicUsize&gt;::send_unbounded (86 samples, 0.70%)</title><rect x="73.6770%" y="117" width="0.6970%" height="15" fill="rgb(247,143,39)"/><text x="73.9270%" y="127.50"></text></g><g><title>simple-torrent`simple_torrent::peer_conn::PeerConn::send (91 samples, 0.74%)</title><rect x="73.6445%" y="133" width="0.7375%" height="15" fill="rgb(236,97,10)"/><text x="73.8945%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`madvise (50 samples, 0.41%)</title><rect x="74.4307%" y="117" width="0.4052%" height="15" fill="rgb(233,208,19)"/><text x="74.6807%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (36 samples, 0.29%)</title><rect x="75.0385%" y="85" width="0.2918%" height="15" fill="rgb(216,164,2)"/><text x="75.2885%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (35 samples, 0.28%)</title><rect x="75.0466%" y="69" width="0.2837%" height="15" fill="rgb(220,129,5)"/><text x="75.2966%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (33 samples, 0.27%)</title><rect x="75.0628%" y="53" width="0.2674%" height="15" fill="rgb(242,17,10)"/><text x="75.3128%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (24 samples, 0.19%)</title><rect x="75.1357%" y="37" width="0.1945%" height="15" fill="rgb(242,107,0)"/><text x="75.3857%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`malloc (38 samples, 0.31%)</title><rect x="75.0385%" y="101" width="0.3080%" height="15" fill="rgb(251,28,31)"/><text x="75.2885%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (139 samples, 1.13%)</title><rect x="75.3465%" y="101" width="1.1265%" height="15" fill="rgb(233,223,10)"/><text x="75.5965%" y="111.50"></text></g><g><title>simple-torrent`bytes::bytes::Bytes::copy_from_slice (179 samples, 1.45%)</title><rect x="75.0385%" y="117" width="1.4507%" height="15" fill="rgb(215,21,27)"/><text x="75.2885%" y="127.50"></text></g><g><title>simple-torrent`simple_torrent::torrent_msg::TorrentMsg::decode (262 samples, 2.12%)</title><rect x="74.3820%" y="133" width="2.1233%" height="15" fill="rgb(232,23,21)"/><text x="74.6320%" y="143.50">s..</text></g><g><title>simple-torrent`std::future::poll_with_tls_context (3,150 samples, 25.53%)</title><rect x="51.1144%" y="149" width="25.5288%" height="15" fill="rgb(244,5,23)"/><text x="51.3644%" y="159.50">simple-torrent`std::future::poll_with_tls..</text></g><g><title>simple-torrent`&lt;std::future::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,226 samples, 26.14%)</title><rect x="50.5470%" y="165" width="26.1447%" height="15" fill="rgb(226,81,46)"/><text x="50.7970%" y="175.50">simple-torrent`&lt;std::future::GenFuture&lt;T&gt; ..</text></g><g><title>simple-torrent`std::future::poll_with_tls_context (15 samples, 0.12%)</title><rect x="76.7080%" y="165" width="0.1216%" height="15" fill="rgb(247,70,30)"/><text x="76.9580%" y="175.50"></text></g><g><title>simple-torrent`&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (3,251 samples, 26.35%)</title><rect x="50.5227%" y="181" width="26.3474%" height="15" fill="rgb(212,68,19)"/><text x="50.7727%" y="191.50">simple-torrent`&lt;std::panic::AssertUnwindSa..</text></g><g><title>simple-torrent`__rust_maybe_catch_panic (3,301 samples, 26.75%)</title><rect x="50.2067%" y="213" width="26.7526%" height="15" fill="rgb(240,187,13)"/><text x="50.4567%" y="223.50">simple-torrent`__rust_maybe_catch_panic</text></g><g><title>simple-torrent`std::panicking::try::do_call (3,278 samples, 26.57%)</title><rect x="50.3931%" y="197" width="26.5662%" height="15" fill="rgb(223,113,26)"/><text x="50.6431%" y="207.50">simple-torrent`std::panicking::try::do_call</text></g><g><title>simple-torrent`&lt;tokio::io::driver::Handle as tokio::park::Unpark&gt;::unpark (21 samples, 0.17%)</title><rect x="77.1699%" y="165" width="0.1702%" height="15" fill="rgb(206,192,2)"/><text x="77.4199%" y="175.50"></text></g><g><title>simple-torrent`mio::poll::SetReadiness::set_readiness (21 samples, 0.17%)</title><rect x="77.1699%" y="149" width="0.1702%" height="15" fill="rgb(241,108,4)"/><text x="77.4199%" y="159.50"></text></g><g><title>simple-torrent`mio::poll::enqueue_with_wakeup (20 samples, 0.16%)</title><rect x="77.1781%" y="133" width="0.1621%" height="15" fill="rgb(247,173,49)"/><text x="77.4281%" y="143.50"></text></g><g><title>simple-torrent`mio::sys::unix::awakener::pipe::Awakener::wakeup (19 samples, 0.15%)</title><rect x="77.1862%" y="117" width="0.1540%" height="15" fill="rgb(224,114,35)"/><text x="77.4362%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`write (19 samples, 0.15%)</title><rect x="77.1862%" y="101" width="0.1540%" height="15" fill="rgb(245,159,27)"/><text x="77.4362%" y="111.50"></text></g><g><title>simple-torrent`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (3,363 samples, 27.26%)</title><rect x="50.1094%" y="229" width="27.2550%" height="15" fill="rgb(245,172,44)"/><text x="50.3594%" y="239.50">simple-torrent`tokio::runtime::task::harness..</text></g><g><title>simple-torrent`tokio::runtime::thread_pool::worker::_&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;::yield_now (31 samples, 0.25%)</title><rect x="77.1132%" y="213" width="0.2512%" height="15" fill="rgb(236,23,11)"/><text x="77.3632%" y="223.50"></text></g><g><title>simple-torrent`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (31 samples, 0.25%)</title><rect x="77.1132%" y="197" width="0.2512%" height="15" fill="rgb(205,117,38)"/><text x="77.3632%" y="207.50"></text></g><g><title>simple-torrent`tokio::runtime::thread_pool::worker::Shared::schedule_local (31 samples, 0.25%)</title><rect x="77.1132%" y="181" width="0.2512%" height="15" fill="rgb(237,72,25)"/><text x="77.3632%" y="191.50"></text></g><g><title>simple-torrent`std::thread::local::LocalKey&lt;T&gt;::with (3,488 samples, 28.27%)</title><rect x="49.1855%" y="261" width="28.2681%" height="15" fill="rgb(244,70,9)"/><text x="49.4355%" y="271.50">simple-torrent`std::thread::local::LocalKey&lt;T..</text></g><g><title>simple-torrent`tokio::runtime::thread_pool::worker::Context::run_task::_{{closure}} (3,433 samples, 27.82%)</title><rect x="49.6313%" y="245" width="27.8224%" height="15" fill="rgb(217,125,39)"/><text x="49.8813%" y="255.50">simple-torrent`tokio::runtime::thread_pool::w..</text></g><g><title>simple-torrent`tokio::coop::HITS::__getit (14 samples, 0.11%)</title><rect x="77.4536%" y="261" width="0.1135%" height="15" fill="rgb(235,36,10)"/><text x="77.7036%" y="271.50"></text></g><g><title>simple-torrent`tokio::runtime::thread_pool::idle::Idle::worker_to_notify (17 samples, 0.14%)</title><rect x="77.5671%" y="261" width="0.1378%" height="15" fill="rgb(251,123,47)"/><text x="77.8171%" y="271.50"></text></g><g><title>simple-torrent`tokio::runtime::thread_pool::worker::Context::run_task (4,149 samples, 33.63%)</title><rect x="44.1365%" y="277" width="33.6251%" height="15" fill="rgb(221,13,13)"/><text x="44.3865%" y="287.50">simple-torrent`tokio::runtime::thread_pool::worker::Co..</text></g><g><title>simple-torrent`tokio::runtime::thread_pool::worker::Context::run (9,561 samples, 77.49%)</title><rect x="0.4863%" y="293" width="77.4860%" height="15" fill="rgb(238,131,9)"/><text x="0.7363%" y="303.50">simple-torrent`tokio::runtime::thread_pool::worker::Context::run</text></g><g><title>simple-torrent`tokio::runtime::thread_pool::worker::Core::drain_pending_drop (26 samples, 0.21%)</title><rect x="77.7616%" y="277" width="0.2107%" height="15" fill="rgb(211,50,8)"/><text x="78.0116%" y="287.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (9,632 samples, 78.06%)</title><rect x="0.0000%" y="549" width="78.0614%" height="15" fill="rgb(245,182,24)"/><text x="0.2500%" y="559.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (9,632 samples, 78.06%)</title><rect x="0.0000%" y="533" width="78.0614%" height="15" fill="rgb(242,14,37)"/><text x="0.2500%" y="543.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>simple-torrent`std::sys::unix::thread::Thread::new::thread_start (9,632 samples, 78.06%)</title><rect x="0.0000%" y="517" width="78.0614%" height="15" fill="rgb(246,228,12)"/><text x="0.2500%" y="527.50">simple-torrent`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>simple-torrent`&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (9,632 samples, 78.06%)</title><rect x="0.0000%" y="501" width="78.0614%" height="15" fill="rgb(213,55,15)"/><text x="0.2500%" y="511.50">simple-torrent`&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once</text></g><g><title>simple-torrent`core::ops::function::FnOnce::call_once{{vtable.shim}} (9,632 samples, 78.06%)</title><rect x="0.0000%" y="485" width="78.0614%" height="15" fill="rgb(209,9,3)"/><text x="0.2500%" y="495.50">simple-torrent`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>simple-torrent`__rust_maybe_catch_panic (9,632 samples, 78.06%)</title><rect x="0.0000%" y="469" width="78.0614%" height="15" fill="rgb(230,59,30)"/><text x="0.2500%" y="479.50">simple-torrent`__rust_maybe_catch_panic</text></g><g><title>simple-torrent`std::panicking::try::do_call (9,632 samples, 78.06%)</title><rect x="0.0000%" y="453" width="78.0614%" height="15" fill="rgb(209,121,21)"/><text x="0.2500%" y="463.50">simple-torrent`std::panicking::try::do_call</text></g><g><title>simple-torrent`std::sys_common::backtrace::__rust_begin_short_backtrace (9,632 samples, 78.06%)</title><rect x="0.0000%" y="437" width="78.0614%" height="15" fill="rgb(220,109,13)"/><text x="0.2500%" y="447.50">simple-torrent`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple-torrent`tokio::runtime::context::enter (9,632 samples, 78.06%)</title><rect x="0.0000%" y="421" width="78.0614%" height="15" fill="rgb(232,18,1)"/><text x="0.2500%" y="431.50">simple-torrent`tokio::runtime::context::enter</text></g><g><title>simple-torrent`tokio::runtime::blocking::pool::Inner::run (9,632 samples, 78.06%)</title><rect x="0.0000%" y="405" width="78.0614%" height="15" fill="rgb(215,41,42)"/><text x="0.2500%" y="415.50">simple-torrent`tokio::runtime::blocking::pool::Inner::run</text></g><g><title>simple-torrent`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (9,632 samples, 78.06%)</title><rect x="0.0000%" y="389" width="78.0614%" height="15" fill="rgb(224,123,36)"/><text x="0.2500%" y="399.50">simple-torrent`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>simple-torrent`__rust_maybe_catch_panic (9,632 samples, 78.06%)</title><rect x="0.0000%" y="373" width="78.0614%" height="15" fill="rgb(240,125,3)"/><text x="0.2500%" y="383.50">simple-torrent`__rust_maybe_catch_panic</text></g><g><title>simple-torrent`std::panicking::try::do_call (9,632 samples, 78.06%)</title><rect x="0.0000%" y="357" width="78.0614%" height="15" fill="rgb(205,98,50)"/><text x="0.2500%" y="367.50">simple-torrent`std::panicking::try::do_call</text></g><g><title>simple-torrent`tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (9,632 samples, 78.06%)</title><rect x="0.0000%" y="341" width="78.0614%" height="15" fill="rgb(205,185,37)"/><text x="0.2500%" y="351.50">simple-torrent`tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut</text></g><g><title>simple-torrent`tokio::runtime::thread_pool::worker::run (9,632 samples, 78.06%)</title><rect x="0.0000%" y="325" width="78.0614%" height="15" fill="rgb(238,207,15)"/><text x="0.2500%" y="335.50">simple-torrent`tokio::runtime::thread_pool::worker::run</text></g><g><title>simple-torrent`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (9,632 samples, 78.06%)</title><rect x="0.0000%" y="309" width="78.0614%" height="15" fill="rgb(213,199,42)"/><text x="0.2500%" y="319.50">simple-torrent`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set</text></g><g><title>libsystem_kernel.dylib`madvise (29 samples, 0.24%)</title><rect x="78.3370%" y="341" width="0.2350%" height="15" fill="rgb(235,201,11)"/><text x="78.5870%" y="351.50"></text></g><g><title>simple-torrent`&lt;D as digest::digest::Digest&gt;::digest (902 samples, 7.31%)</title><rect x="78.5720%" y="341" width="7.3102%" height="15" fill="rgb(207,46,11)"/><text x="78.8220%" y="351.50">simple-tor..</text></g><g><title>simple-torrent`sha1::utils::compress (900 samples, 7.29%)</title><rect x="78.5882%" y="325" width="7.2939%" height="15" fill="rgb(241,35,35)"/><text x="78.8382%" y="335.50">simple-tor..</text></g><g><title>simple-torrent`&lt;std::io::Take&lt;T&gt; as std::io::Read&gt;::read_to_end (112 samples, 0.91%)</title><rect x="85.9389%" y="325" width="0.9077%" height="15" fill="rgb(243,32,47)"/><text x="86.1889%" y="335.50"></text></g><g><title>libsystem_kernel.dylib`read (112 samples, 0.91%)</title><rect x="85.9389%" y="309" width="0.9077%" height="15" fill="rgb(247,202,23)"/><text x="86.1889%" y="319.50"></text></g><g><title>simple-torrent`simple_torrent::torrent::Torrent::new (1,055 samples, 8.55%)</title><rect x="78.3289%" y="357" width="8.5501%" height="15" fill="rgb(219,102,11)"/><text x="78.5789%" y="367.50">simple-torre..</text></g><g><title>simple-torrent`simple_torrent::torrent::piece::Piece::data_from_disk (119 samples, 0.96%)</title><rect x="85.9146%" y="341" width="0.9644%" height="15" fill="rgb(243,110,44)"/><text x="86.1646%" y="351.50"></text></g><g><title>libsystem_kernel.dylib`__close_nocancel (73 samples, 0.59%)</title><rect x="87.2923%" y="341" width="0.5916%" height="15" fill="rgb(222,74,54)"/><text x="87.5423%" y="351.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (37 samples, 0.30%)</title><rect x="87.9326%" y="341" width="0.2999%" height="15" fill="rgb(216,99,12)"/><text x="88.1826%" y="351.50"></text></g><g><title>simple-torrent`tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (14 samples, 0.11%)</title><rect x="88.3297%" y="309" width="0.1135%" height="15" fill="rgb(226,22,26)"/><text x="88.5797%" y="319.50"></text></g><g><title>simple-torrent`tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (18 samples, 0.15%)</title><rect x="88.3054%" y="325" width="0.1459%" height="15" fill="rgb(217,163,10)"/><text x="88.5554%" y="335.50"></text></g><g><title>simple-torrent`&lt;std::future::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (29 samples, 0.24%)</title><rect x="88.2405%" y="341" width="0.2350%" height="15" fill="rgb(213,25,53)"/><text x="88.4905%" y="351.50"></text></g><g><title>libsystem_kernel.dylib`madvise (15 samples, 0.12%)</title><rect x="88.8403%" y="325" width="0.1216%" height="15" fill="rgb(252,105,26)"/><text x="89.0903%" y="335.50"></text></g><g><title>libsystem_kernel.dylib`write (119 samples, 0.96%)</title><rect x="88.9618%" y="325" width="0.9644%" height="15" fill="rgb(220,39,43)"/><text x="89.2118%" y="335.50"></text></g><g><title>simple-torrent`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (341 samples, 2.76%)</title><rect x="89.9263%" y="325" width="2.7636%" height="15" fill="rgb(229,68,48)"/><text x="90.1763%" y="335.50">si..</text></g><g><title>simple-torrent`simple_torrent::torrent::piece::Piece::flush_to_disk (478 samples, 3.87%)</title><rect x="88.8322%" y="341" width="3.8739%" height="15" fill="rgb(252,8,32)"/><text x="89.0822%" y="351.50">simp..</text></g><g><title>simple-torrent`simple_torrent::torrent::piece::Piece::piece_status (355 samples, 2.88%)</title><rect x="92.7466%" y="341" width="2.8771%" height="15" fill="rgb(223,20,43)"/><text x="92.9966%" y="351.50">si..</text></g><g><title>simple-torrent`&lt;D as digest::digest::Digest&gt;::input (355 samples, 2.88%)</title><rect x="92.7466%" y="325" width="2.8771%" height="15" fill="rgb(229,81,49)"/><text x="92.9966%" y="335.50">si..</text></g><g><title>simple-torrent`sha1::utils::compress (352 samples, 2.85%)</title><rect x="92.7709%" y="309" width="2.8527%" height="15" fill="rgb(236,28,36)"/><text x="93.0209%" y="319.50">si..</text></g><g><title>libsystem_kernel.dylib`__sendto (126 samples, 1.02%)</title><rect x="95.7938%" y="277" width="1.0212%" height="15" fill="rgb(249,185,26)"/><text x="96.0438%" y="287.50"></text></g><g><title>simple-torrent`&lt;&amp;mio::net::tcp::TcpStream as std::io::Write&gt;::write (136 samples, 1.10%)</title><rect x="95.7533%" y="293" width="1.1022%" height="15" fill="rgb(249,174,33)"/><text x="96.0033%" y="303.50"></text></g><g><title>simple-torrent`&lt;tokio::net::tcp::split_owned::OwnedWriteHalf as tokio::io::async_write::AsyncWrite&gt;::poll_write (143 samples, 1.16%)</title><rect x="95.7371%" y="325" width="1.1589%" height="15" fill="rgb(233,201,37)"/><text x="95.9871%" y="335.50"></text></g><g><title>simple-torrent`tokio::net::tcp::stream::TcpStream::poll_write_priv (142 samples, 1.15%)</title><rect x="95.7452%" y="309" width="1.1508%" height="15" fill="rgb(221,78,26)"/><text x="95.9952%" y="319.50"></text></g><g><title>simple-torrent`simple_torrent::torrent_msg::TorrentMsg::encode (22 samples, 0.18%)</title><rect x="96.8960%" y="325" width="0.1783%" height="15" fill="rgb(250,127,30)"/><text x="97.1460%" y="335.50"></text></g><g><title>simple-torrent`std::future::poll_with_tls_context (178 samples, 1.44%)</title><rect x="95.6398%" y="341" width="1.4426%" height="15" fill="rgb(230,49,44)"/><text x="95.8898%" y="351.50"></text></g><g><title>libsystem_kernel.dylib`write (90 samples, 0.73%)</title><rect x="97.2526%" y="261" width="0.7294%" height="15" fill="rgb(229,67,23)"/><text x="97.5026%" y="271.50"></text></g><g><title>simple-torrent`tokio::time::driver::entry::Entry::cancel (102 samples, 0.83%)</title><rect x="97.1797%" y="341" width="0.8266%" height="15" fill="rgb(249,83,47)"/><text x="97.4297%" y="351.50"></text></g><g><title>simple-torrent`&lt;tokio::io::driver::Handle as tokio::park::Unpark&gt;::unpark (98 samples, 0.79%)</title><rect x="97.2121%" y="325" width="0.7942%" height="15" fill="rgb(215,43,3)"/><text x="97.4621%" y="335.50"></text></g><g><title>simple-torrent`mio::poll::SetReadiness::set_readiness (97 samples, 0.79%)</title><rect x="97.2202%" y="309" width="0.7861%" height="15" fill="rgb(238,154,13)"/><text x="97.4702%" y="319.50"></text></g><g><title>simple-torrent`mio::poll::enqueue_with_wakeup (95 samples, 0.77%)</title><rect x="97.2364%" y="293" width="0.7699%" height="15" fill="rgb(219,56,2)"/><text x="97.4864%" y="303.50"></text></g><g><title>simple-torrent`mio::sys::unix::awakener::pipe::Awakener::wakeup (94 samples, 0.76%)</title><rect x="97.2445%" y="277" width="0.7618%" height="15" fill="rgb(233,0,4)"/><text x="97.4945%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_memalign (37 samples, 0.30%)</title><rect x="98.2576%" y="277" width="0.2999%" height="15" fill="rgb(235,30,7)"/><text x="98.5076%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`tiny_memalign (31 samples, 0.25%)</title><rect x="98.3062%" y="261" width="0.2512%" height="15" fill="rgb(250,79,13)"/><text x="98.5562%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (16 samples, 0.13%)</title><rect x="98.4277%" y="245" width="0.1297%" height="15" fill="rgb(211,146,34)"/><text x="98.6777%" y="255.50"></text></g><g><title>simple-torrent`simple_torrent::torrent::Torrent::start::_{{closure}} (1,443 samples, 11.69%)</title><rect x="86.8790%" y="357" width="11.6946%" height="15" fill="rgb(228,22,38)"/><text x="87.1290%" y="367.50">simple-torrent`si..</text></g><g><title>simple-torrent`tokio::time::driver::registration::Registration::new (70 samples, 0.57%)</title><rect x="98.0063%" y="341" width="0.5673%" height="15" fill="rgb(235,168,5)"/><text x="98.2563%" y="351.50"></text></g><g><title>simple-torrent`tokio::time::driver::entry::Entry::new (57 samples, 0.46%)</title><rect x="98.1117%" y="325" width="0.4619%" height="15" fill="rgb(221,155,16)"/><text x="98.3617%" y="335.50"></text></g><g><title>simple-torrent`__rdl_alloc (39 samples, 0.32%)</title><rect x="98.2576%" y="309" width="0.3161%" height="15" fill="rgb(215,215,53)"/><text x="98.5076%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`posix_memalign (39 samples, 0.32%)</title><rect x="98.2576%" y="293" width="0.3161%" height="15" fill="rgb(223,4,10)"/><text x="98.5076%" y="303.50"></text></g><g><title>simple-torrent`&lt;std::future::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,532 samples, 20.52%)</title><rect x="78.1020%" y="373" width="20.5203%" height="15" fill="rgb(234,103,6)"/><text x="78.3520%" y="383.50">simple-torrent`&lt;std::future::Gen..</text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (137 samples, 1.11%)</title><rect x="98.7276%" y="341" width="1.1103%" height="15" fill="rgb(227,97,0)"/><text x="98.9776%" y="351.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_wait (15 samples, 0.12%)</title><rect x="99.8379%" y="341" width="0.1216%" height="15" fill="rgb(234,150,53)"/><text x="100.0879%" y="351.50"></text></g><g><title>simple-torrent`&lt;tokio::park::thread::CachedParkThread as tokio::park::Park&gt;::park (169 samples, 1.37%)</title><rect x="98.6223%" y="373" width="1.3696%" height="15" fill="rgb(228,201,54)"/><text x="98.8723%" y="383.50"></text></g><g><title>simple-torrent`tokio::park::thread::Inner::park (161 samples, 1.30%)</title><rect x="98.6871%" y="357" width="1.3048%" height="15" fill="rgb(222,22,37)"/><text x="98.9371%" y="367.50"></text></g><g><title>all (12,339 samples, 100%)</title><rect x="0.0000%" y="565" width="100.0000%" height="15" fill="rgb(237,53,32)"/><text x="0.2500%" y="575.50"></text></g><g><title>simple-torrent`0x2 (2,707 samples, 21.94%)</title><rect x="78.0614%" y="549" width="21.9386%" height="15" fill="rgb(233,25,53)"/><text x="78.3114%" y="559.50">simple-torrent`0x2</text></g><g><title>libdyld.dylib`start (2,707 samples, 21.94%)</title><rect x="78.0614%" y="533" width="21.9386%" height="15" fill="rgb(210,40,34)"/><text x="78.3114%" y="543.50">libdyld.dylib`start</text></g><g><title>simple-torrent`main (2,707 samples, 21.94%)</title><rect x="78.0614%" y="517" width="21.9386%" height="15" fill="rgb(241,220,44)"/><text x="78.3114%" y="527.50">simple-torrent`main</text></g><g><title>simple-torrent`std::rt::lang_start_internal (2,707 samples, 21.94%)</title><rect x="78.0614%" y="501" width="21.9386%" height="15" fill="rgb(235,28,35)"/><text x="78.3114%" y="511.50">simple-torrent`std::rt::lang_start_..</text></g><g><title>simple-torrent`__rust_maybe_catch_panic (2,706 samples, 21.93%)</title><rect x="78.0695%" y="485" width="21.9305%" height="15" fill="rgb(210,56,17)"/><text x="78.3195%" y="495.50">simple-torrent`__rust_maybe_catch_p..</text></g><g><title>simple-torrent`std::panicking::try::do_call (2,706 samples, 21.93%)</title><rect x="78.0695%" y="469" width="21.9305%" height="15" fill="rgb(224,130,29)"/><text x="78.3195%" y="479.50">simple-torrent`std::panicking::try:..</text></g><g><title>simple-torrent`std::rt::lang_start::_{{closure}} (2,706 samples, 21.93%)</title><rect x="78.0695%" y="453" width="21.9305%" height="15" fill="rgb(235,212,8)"/><text x="78.3195%" y="463.50">simple-torrent`std::rt::lang_start:..</text></g><g><title>simple-torrent`simple_torrent::main (2,706 samples, 21.93%)</title><rect x="78.0695%" y="437" width="21.9305%" height="15" fill="rgb(223,33,50)"/><text x="78.3195%" y="447.50">simple-torrent`simple_torrent::main</text></g><g><title>simple-torrent`tokio::runtime::handle::Handle::enter (2,706 samples, 21.93%)</title><rect x="78.0695%" y="421" width="21.9305%" height="15" fill="rgb(219,149,13)"/><text x="78.3195%" y="431.50">simple-torrent`tokio::runtime::hand..</text></g><g><title>simple-torrent`tokio::runtime::context::enter (2,706 samples, 21.93%)</title><rect x="78.0695%" y="405" width="21.9305%" height="15" fill="rgb(250,156,29)"/><text x="78.3195%" y="415.50">simple-torrent`tokio::runtime::cont..</text></g><g><title>simple-torrent`tokio::runtime::enter::Enter::block_on (2,704 samples, 21.91%)</title><rect x="78.0857%" y="389" width="21.9143%" height="15" fill="rgb(216,193,19)"/><text x="78.3357%" y="399.50">simple-torrent`tokio::runtime::ente..</text></g></svg></svg>